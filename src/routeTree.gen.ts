/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as Function4Import } from './routes/function4'
import { Route as Function3Import } from './routes/function3'
import { Route as Function2Import } from './routes/function2'
import { Route as Function1Import } from './routes/function1'
import { Route as IndexImport } from './routes/index'
import { Route as UserProfileImport } from './routes/user/profile'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const Function4Route = Function4Import.update({
  id: '/function4',
  path: '/function4',
  getParentRoute: () => rootRoute,
} as any)

const Function3Route = Function3Import.update({
  id: '/function3',
  path: '/function3',
  getParentRoute: () => rootRoute,
} as any)

const Function2Route = Function2Import.update({
  id: '/function2',
  path: '/function2',
  getParentRoute: () => rootRoute,
} as any)

const Function1Route = Function1Import.update({
  id: '/function1',
  path: '/function1',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserProfileRoute = UserProfileImport.update({
  id: '/user/profile',
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/function1': {
      id: '/function1'
      path: '/function1'
      fullPath: '/function1'
      preLoaderRoute: typeof Function1Import
      parentRoute: typeof rootRoute
    }
    '/function2': {
      id: '/function2'
      path: '/function2'
      fullPath: '/function2'
      preLoaderRoute: typeof Function2Import
      parentRoute: typeof rootRoute
    }
    '/function3': {
      id: '/function3'
      path: '/function3'
      fullPath: '/function3'
      preLoaderRoute: typeof Function3Import
      parentRoute: typeof rootRoute
    }
    '/function4': {
      id: '/function4'
      path: '/function4'
      fullPath: '/function4'
      preLoaderRoute: typeof Function4Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/function1': typeof Function1Route
  '/function2': typeof Function2Route
  '/function3': typeof Function3Route
  '/function4': typeof Function4Route
  '/login': typeof LoginRoute
  '/user/profile': typeof UserProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/function1': typeof Function1Route
  '/function2': typeof Function2Route
  '/function3': typeof Function3Route
  '/function4': typeof Function4Route
  '/login': typeof LoginRoute
  '/user/profile': typeof UserProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/function1': typeof Function1Route
  '/function2': typeof Function2Route
  '/function3': typeof Function3Route
  '/function4': typeof Function4Route
  '/login': typeof LoginRoute
  '/user/profile': typeof UserProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/function1'
    | '/function2'
    | '/function3'
    | '/function4'
    | '/login'
    | '/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/function1'
    | '/function2'
    | '/function3'
    | '/function4'
    | '/login'
    | '/user/profile'
  id:
    | '__root__'
    | '/'
    | '/function1'
    | '/function2'
    | '/function3'
    | '/function4'
    | '/login'
    | '/user/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Function1Route: typeof Function1Route
  Function2Route: typeof Function2Route
  Function3Route: typeof Function3Route
  Function4Route: typeof Function4Route
  LoginRoute: typeof LoginRoute
  UserProfileRoute: typeof UserProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Function1Route: Function1Route,
  Function2Route: Function2Route,
  Function3Route: Function3Route,
  Function4Route: Function4Route,
  LoginRoute: LoginRoute,
  UserProfileRoute: UserProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/function1",
        "/function2",
        "/function3",
        "/function4",
        "/login",
        "/user/profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/function1": {
      "filePath": "function1.tsx"
    },
    "/function2": {
      "filePath": "function2.tsx"
    },
    "/function3": {
      "filePath": "function3.tsx"
    },
    "/function4": {
      "filePath": "function4.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/user/profile": {
      "filePath": "user/profile.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
